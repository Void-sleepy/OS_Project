import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.IOException;

public class ARDriver {

    // Mapper class
    public static class GenreRatingMapper extends Mapper<LongWritable, Text, Text, FloatWritable> {
        private Text genreTypeKey = new Text();
        private FloatWritable rating = new FloatWritable();

        @Override
        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            // Skip header row
            if (key.get() == 0 && value.toString().contains("type,imdb_rating,genre")) {
                return;
            }

            // Split CSV line
            String[] fields = value.toString().split(",", 3);
            if (fields.length != 3) {
                return; // Skip malformed lines
            }

            String type = fields[0].trim();
            String ratingStr = fields[1].trim();
            String genres = fields[2].trim();

            // Validate rating
            float ratingValue;
            try {
                ratingValue = Float.parseFloat(ratingStr);
            } catch (NumberFormatException e) {
                return; // Skip invalid ratings
            }

            // Split genres by comma and trim whitespace
            String[] genreArray = genres.split(",");
            for (String genre : genreArray) {
                genre = genre.trim();
                if (!genre.isEmpty()) {
                    // Create key "TV, cartoon  "
                    String keyStr = type + ", " + genre;
                    genreTypeKey.set(keyStr);
                    rating.set(ratingValue);
                    context.write(genreTypeKey, rating);
                }
            }
        }
    }

    // Reducer
    public static class AverageRatingReducer extends Reducer<Text, FloatWritable, Text, FloatWritable> {
        private FloatWritable result = new FloatWritable();

        @Override
        public void reduce(Text key, Iterable<FloatWritable> values, Context context)
                throws IOException, InterruptedException {
            float sum = 0;
            int count = 0;

            for (FloatWritable val : values) {
                sum += val.get();
                count++;
            }

            if (count > 0) {
                float average = sum / count;
                float roundedAverage = Math.round(average * 10f) / 10f;  // 1 digit
                result.set(roundedAverage);
                context.write(key, result);
            }
        }
    }

    // Main method
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Genre Rating Average");
        job.setJarByClass(ARDriver.class);

        job.setMapperClass(GenreRatingMapper.class);
        job.setReducerClass(AverageRatingReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(FloatWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}